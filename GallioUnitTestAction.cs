using System;
using System.IO;
using System.Xml;
using Inedo.BuildMaster;
using Inedo.BuildMaster.Extensibility.Actions;
using Inedo.BuildMaster.Extensibility.Actions.Testing;
using Inedo.BuildMaster.Web;

namespace Inedo.BuildMasterExtensions.Gallio
{
    /// <summary>
    /// Represents an action that executes the Gallio test runner.
    /// </summary>
    [Tag(Tags.UnitTests)]
    [ActionProperties(
        "Execute Gallio Test Runner",
        "Runs a series of tests using the Gallio test runner.")]
    [CustomEditor(typeof(GallioUnitTestActionEditor))]
    public sealed class GallioUnitTestAction : UnitTestActionBase
    {
        /// <summary>
        /// The URI of the XML namespace in the report generated by Gallio.
        /// </summary>
        private const string NamespaceUri = "http://www.gallio.org/";

        /// <summary>
        /// Initializes a new instance of the <see cref="GallioUnitTestAction" /> class.
        /// </summary>
        public GallioUnitTestAction()
        {
        }

        /// <summary>
        /// Gets or sets the relative path of the test file from the source directory.
        /// </summary>
        [Persistent]
        public string TestFile { get; set; }

        /// <summary>
        /// Runs a unit test against the target specified in the action.
        /// After the test is run, use the <see cref="M:RecordResult" /> method
        /// to save the test results to the database.
        /// </summary>
        protected override void RunTests()
        {
            var configurer = (GallioExtensionConfigurer)this.GetExtensionConfigurer();
            if (string.IsNullOrEmpty(configurer.GallioEchoPath))
            {
                this.LogError("Could not find Gallio.Echo.exe on the specified server.");
                return;
            }

            var tempReportFileName = Util.Path2.Combine(this.Context.TempDirectory, "gallio-report.xml");
            try
            {
                var testFilePath = Util.Path2.Combine(this.Context.SourceDirectory, this.TestFile);

                int res = this.ExecuteCommandLine(
                    configurer.GallioEchoPath,
                    string.Format("\"{0}\" /verbosity:Verbose /report-type:Xml /report-directory:\"{1}\" /report-name-format:\"{2}\"", testFilePath, Path.GetDirectoryName(tempReportFileName), Path.GetFileNameWithoutExtension(tempReportFileName)),
                    this.Context.SourceDirectory);

                if (res != 0)
                {
                    this.LogError("Gallio.Echo.exe returned error code: {0:X8}", res);
                    return;
                }

                var xmlDoc = new XmlDocument();
                xmlDoc.Load(tempReportFileName);

                var nsManager = new XmlNamespaceManager(xmlDoc.NameTable);
                nsManager.AddNamespace("g", NamespaceUri);

                foreach (XmlNode testStepNode in xmlDoc.SelectNodes("/g:report/g:testPackageRun//g:testStep[@isTestCase='true']", nsManager))
                {
                    // each testStep is a child of a testStepRun (which actually holds the results), so use the parent
                    var resultNode = testStepNode.ParentNode.SelectSingleNode("g:result", nsManager);
                    var outcomeNode = resultNode.SelectSingleNode("g:outcome", nsManager);

                    string testName = testStepNode.Attributes["fullName"].Value;
                    string testStatus = outcomeNode.Attributes["status"].Value;

                    // skip tests that weren't actually run or were inconclusive
                    if (testStatus == GallioTestStatuses.Skipped || testStatus == GallioTestStatuses.Inconclusive)
                    {
                        LogInformation(String.Format("Gallio Test: {0} ({1})", testName, testStatus));
                        continue;
                    }

                    this.LogInformation(String.Format("Gallio Test: {0}, Result: {1}, Test Length: {2} secs",
                        testName,
                        testStatus,
                        Double.Parse(resultNode.Attributes["duration"].Value)));

                    this.RecordResult(
                        testName,
                        outcomeNode.Attributes["status"].Value == GallioTestStatuses.Passed,
                        testStepNode.OuterXml,
                        DateTime.Parse(testStepNode.ParentNode.Attributes["startTime"].Value),
                        DateTime.Parse(testStepNode.ParentNode.Attributes["endTime"].Value)
                    );
                }
            }
            finally
            {
                try { File.Delete(tempReportFileName); }
                catch { }
            }
        }

        /// <summary>
        /// Returns a <see cref="System.String" /> that represents this instance.
        /// </summary>
        /// <returns>
        /// A <see cref="System.String" /> that represents this instance.
        /// </returns>
        /// <remarks>
        /// This should return a user-friendly string describing what the Action does
        /// and the state of its important persistent properties.
        /// </remarks>
        public override string ToString()
        {
            return string.Format("Execute the Gallio test runner on {0}", Util.Path2.Combine(this.OverriddenSourceDirectory, this.TestFile));
        }

        /// <summary>
        /// Represents a list of the possible test statuses returned from Gallio.
        /// </summary>
        private static class GallioTestStatuses
        {
            public const string Passed = "passed";
            public const string Failed = "failed";
            public const string Inconclusive = "inconclusive";
            public const string Skipped = "skipped";
        }
    }
}
